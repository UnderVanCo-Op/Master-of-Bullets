extends Node2D

var rock = preload("res://Scenes and scripts/Rock.tscn").instance()
var test = preload("res://Scenes and scripts/OldRock.tscn")
var rock_speed = 1000
var traj_speed : float = 1200.0 * 60 

var trajectory : PoolVector2Array

func _input(event):
	if event.is_action_pressed("Shoot"):		# spawn rock
		rock.position = $Dulo/SpawnLoc.get_global_position()
		rock.rotation = $Dulo.get_global_rotation()
		rock.apply_impulse(Vector2(), Vector2(rock_speed,0).rotated($Dulo.rotation))
		get_viewport().get_node("Testworld").add_child(rock)

func _physics_process(delta):
	$Dulo.look_at(get_global_mouse_position())
	updatePoints(delta)
	#update()		# для обновления встроенной функции _draw

func _draw():
	draw_polyline(trajectory, Color.red, 5)		# рисует нашу траекторию

func traj_minus(v:Vector2):		# добавить в траекторию с вычетом global pos (тк траектория относительная)
	trajectory.append(v - global_position)

func updatePoints(delta):	# обновляет точки траектории в соотв-ии с текущим направлением мыши
	trajectory.resize(0)

	var remainL = traj_speed * delta # длина траектории
	var start = $Dulo/SpawnLoc.get_global_position()	# позиция дула абс-ая
	var end : Vector2		# вычислим точку до которой будет лететь луч (абс)
	var dir : Vector2		# это нормализированный вектор направления
	end = start + Vector2(remainL, 0).rotated($Dulo.rotation)	# позиция конца абс-ая

	dir = end.normalized()
	traj_minus(start)	# добавить в траекторию с вычетом глобальной позиции
	var data : Dictionary
	var spacestate:= get_world_2d().direct_space_state
	while remainL > 0.001:
		data = spacestate.intersect_ray(start, end)
		if data:	# если есть столкновение
			#data.position - точка пересечения с коллайдером
			end = data.position - (data.position - start).normalized() * 0.01	# смещение точки для выхода из коллайдера
			#end = data.position
			dir = dir.bounce(data.normal).normalized()

		else:
			print("NO DATA")
			#print(data)
		remainL -= (end - start).length()
		traj_minus(end)
		start = end	# переходим на новую точку
		end = start + remainL * dir
	#print(trajectory)

# warning-ignore:unused_argument
func _process(delta):	
	update()		# для обновления встроенной функции _draw
